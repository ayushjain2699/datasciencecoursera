logical = data$ACR==3 & data$AGS==6
which(logical)
install.packages("jpeg")
library(jpeg)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url,destfile = "./try.jpeg")
img = readJPEG("try.jpeg",native = T)
img
dim(img)
quantile(img,probs = c(0.3,0.8))
url1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
url2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url1,destfile = "./gdp")
download.file(url2,destfile = "./country.csv")
download.file(url1,destfile = "./gdp.csv")
gdp = read.csv("gdp.csv")
country = read.csv("country.csv")
head(gdp)
gdp
country
gdp = read.csv("gdp.csv")
getwd()
gdp = read.csv("getdata_data_GDP.csv")
gdp
gdp = read.csv("getdata_data_GDP.csv",skip = 5)
gdp
gdp = read.csv("getdata_data_GDP.csv",skip = 4)
gdp
gdp = read.csv("getdata_data_GDP.csv",skip = 3)
head(gdp)
gdp = read.csv("getdata_data_GDP.csv",skip = 2)
head(gdp)
head(country)
names(gdp)
gdp$X
country$CountryCode
intersect(gdp$x,country$CountryCode)
x = merge(gdp,country,by.x = "x",by.y = "COuntryCode",all = F)
names(gdp)
str(gdp)
tail(gdp)
str(country)
a = gdp$X
b = country$CountryCode
a
b
class(a)
class(b)
c = c("vv","rv3rf")
class(c)
intersect(a,b)
c = intersect(a,b)
dim(c)
length(c)
gdp
y = arrange(gdp,desc(x))
y = arrange(gdp,desc(x.1))
gdp = read.csv("getdata_data_GDP.csv")
head(gdp)
names(gdp)
gdp = read.csv("getdata_data_GDP.csv",skip = 2)
head(gdp)
gdp = read.csv("getdata_data_GDP.csv",skip = 3)
head(gdp)
names(gdp)
y = arrange(gdp,desc(Ranking))
head(gdp)
head(y)
y
gdp = read.csv("getdata_data_GDP.csv",skip = 3,nrows = 195)
tail(gdp)
gdp = read.csv("getdata_data_GDP.csv",skip = 3,nrows = 191)
tail(gdp)
y = arrange(gdp,desc(Ranking))
head(y)
head(y,n = 15)
names(country)
country$Income.Group
names(country)
names(gdp)
merge(gdp,country,by.x = "x",by.y = "CountryCode",all = F)
merge(gdp,country,by.x = x,by.y = CountryCode,all = F)
merge(gdp,country,by.x = "x",by.y = "CountryCode",all = T)
merge(gdp,country,by.x = "Ranking",by.y = "CountryCode",all = F)
rename(gdp,con = x)
names(gdp)
nems(x)
names(gdp)
colnames(x)
colnames(gdp)
gdp$X
head(gdp)
gdp = read.csv("getdata_data_GDP.csv",skip = 4,nrows = 190)
tail(gdp)
head(gdp)
names(gdp)
merge(gdp,country,by.x = "Ranking",by.y = "CountryCode",all = F)
merge(gdp,country,by.x = "x",by.y = "CountryCode",all = F)
merge(gdp,country,by.x = "x.1",by.y = "CountryCode",all = F)
a = gdp$X
y =country$CountryCode
intersect(a,b)
j = intersect(a,b)
length(j)
ans = merge(gdp,country,by.x = "X",by.y = "CountryCode",all = F)
head(ans)
names(ans)
head(gdp)
ans2 = ans%>%group_by(Income.Group)%>%summarise(means = mean(X.1))
head(ans2)
ans2
names(ans)
install.packages("Hmisc")
library(Hmisc)
ans$ranking_groups = cut2(ans$X.1,g=5)
names(ans)
t = table(ans$ranking_groups,ans$Income.Group)
head(t)
t
logical
log = sample(c("TRUE","FALSE"),10,replace = T)
log
which(log)
as.logical(log)
log= as.logical(log)
which(log)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url,destfile = "./q3.csv")
data = read.csv("q3.csv")
names(data)
x = strsplit(names(data),"wgtp")
class(x)
x[123]
x
data = read.csv("getdata_data_GDP.csv")
head(data)
tail(data)
data = read.csv("getdata_data_GDP.csv",skip = 3,nrows = 191)
tail(data)
head(data)
data = read.csv("getdata_data_GDP.csv",skip = 4,nrows = 191)
head(data)
tail(data)
data = read.csv("getdata_data_GDP.csv",skip = 4,nrows = 190)
tail(data)
head(data)
gsub(",","",data$X.4)
y = gsub(",","",data$X.4)
y = as.numeric(y)
mean(y)
countryNames = data$X.3
head(countryNames)
grep("^United",countryNames)
country
names(country)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile = "./q33.scv")
country = read.csv("q33.scv")
names(country)
names(data)
head(data)
str(country)
country$Special.Notes
string = country$Special.Notes
grep("June",string)
x = grep("June",string)
length(x)
x = grep("June",string,value = T)
x
x = grep("Fiscal year end: June",string)
length(x)
length(x)
x
x = grep("Fiscal year end: June",string,value = T)
x
x = grepl("Fiscal year end: June",string,value = T)
x = grepl("Fiscal year end: June",string)
x
which(x)
y = which(x)
length(y)
date()
Sys.Date()
iinstall.packages("Lubridate")
iinstall.packages("lubridate")
install.packages("lubridate")
library(lubridate)
x = "20182004"
ymd(x)
ydm(x)
wday(x)
y = ydm(x)
wday(y)
wday(y,label = T)
y = as.POSIXlt(y)
y
y$year
y$date
names(y)
y
y
names(y)
y$mday
y$mon
str(y)
summary(y)
rm(list(ls()))
rm((ls()))
ls()
class(ls())
rm(ls())
rm(c(ls()))
rm(list=ls())
ls()
search()
setwd("D:/Docs/personal/Data Science/datasciencecoursera/UCI HAR Dataset/test")
x = read.table("X_test.txt")
y = read.table("y_test.txt")
s = read.table("subject_test.txt")
train = cbind(s,y,x)
setwd("D:/Docs/personal/Data Science/datasciencecoursera/UCI HAR Dataset/train")
test = cbind(s,y,x)
x = read.table("X_train.txt")
y = read.table("y_train.txt")
s = read.table("subject_train.txt")
test = cbind(s,y,x)
setwd("D:/Docs/personal/Data Science/datasciencecoursera/UCI HAR Dataset")
features = read.table("features.txt")
c = grep("mean|std",features$V2)
c
c = grepl("mean|std",features$V2)
train = train[,c]
setwd(".//train")
x = read.table("X_train.txt")
y= read.table("y_train.txt")
s = read.table("subject_train.txt")
x = x[,c]
length(c)
dim(x)
table(c)
train = cbind(s,y,x)
setwd("..")
setwd(".//test")
x = read.table("X_test.txt")
y = read.table("y_test.txt")
s = read.table("subject_test.txt")
x = x[,c]
test = cbind[s,y,x]
test = cbind(s,y,x)
final = rbind(test,train)
names(final)
head(final)
library(dplyr)
final$V1
rename(final,subjects = v1)
rename(final,subjects = V1)
names(x)
names(y)
names(z)
names(s)
rename(y,activity = V1)
names(y)
head(y)
names(y)
rename(y,activity = v1)
rename(y,activity = V1)
names(y)
class(y)
rename(s,subject = V1)
names(s)
names(y) = c("activity")
names(y)
names(s) = "subject"
names(s)
test = cbind(s,y,x)
setwd("..")
setwd(".//train")
x = read.table("X_train.txt")
x = [,c]
x = x[,c]
y = read.table("y_train.txt")
s = read.table("subject_train.txt")
names(y)= "activity"
names(s) = "subject"
final = rbind(train,test)
names(train)
train = cbind(s,y,x)
final = rbind(train,test)
names(final)
table(final$activity)
temp = final
t = factor(final$activity,labels = c("w","wu","wd","s","l","St"))
t
temp$activity
temp$activity = t
names(temp)
head(temp)
t = factor(final$activity,labels = c("walking","walking_upstairs","walking_downstairs","sitting","standing","laying"))
temp = final
final$activity = t
head(final)
features
View(final)
features[1]
features[1,]
filter(feature,c)
filter(features,c)
c
features = filter(features,c)
features = filter(features,c)
feature_names = features$V2
colnames(final)
coln = c("Subject","Activity",feature_names)
colnames(temp) = coln
names(temp)
View(temp)
colnames(final) = coln
names(final)
str(final)
final$Activity
install.packages("tidyr")
dcast
library(data.table)
final_temp = dcast(final,Subject~Activity)
temp = as.data.table(final)
final_temp = dcast(temp,Subject~Activity)
final_temp
temp = final%>% group_by(Subject)%>%group_by(Activity)
temp
colMeans(temp)
li = split(final,subject)
li = split(final,Subject)
li = split(final,final$Subject)
str(li)
h = li$1
h = li$`1`
h = tapply(h,h$Activity,colMeans)
head(h)
h = tapply(h,h$Activity)
h$Activity
nrow(h)
sapply(li,colMeans)
sapply(li,function(x) colMeans(x[,2:81]))
li$`1`
sapply(li,function(x) colMeans(x[,3:81]))
fi = dcast(final,Subject+Activity~feature_names)
fi = dcast(temp,Subject+Activity~feature_names)
temp = as.data.table(final)
fi = dcast(temp,Subject+Activity~feature_names)
fi = dcast(temp,c(Subject,Activity)~feature_names)
temp = final%>% group_by(Subject)%>%group_by(Activity)%>%summarise(new = mean(`tBodyAcc-mean()-X`))
temp
temp = final%>% group_by(Subject,Activity)%>%summarise(new = mean(`tBodyAcc-mean()-X`))
temp
temp = final%>% group_by(Subject,Activity)%>%summarise(colMeans(final[3:81])
)
temp = final%>% group_by(Subject,Activity)%>%summarise_all(funs(mean))
temp
temp = final%>% group_by(Subject,Activity)%>%summarise_at(vars(`tBodyAcc-mean()-X`:`fBodyBodyGyroJerkMag-std()`),mean)
temp
temp = as.data.frame(temp)
head(temp)
final2 = temp
View(final2)
names(final2)
names(final1)
names(final)
temp = final%>% group_by(Subject,Activity)%>%summarise_at(vars(`tBodyAcc-mean()-X`:`fBodyBodyGyroJerkMag-meanFreq()`,mean)
)
temp = final%>% group_by(Subject,Activity)%>%summarise_at(vars(`tBodyAcc-mean()-X`:`fBodyBodyGyroJerkMag-meanFreq()`,mean)
)
temp = final%>% group_by(Subject,Activity)%>%summarise_at(vars(`tBodyAcc-mean()-X`:`fBodyBodyGyroJerkMag-std()`),mean)
temp = final%>% group_by(Subject,Activity)%>%summarise_at(vars(`tBodyAcc-mean()-X`:`fBodyBodyGyroJerkMag-meanFreq()`),mean)
final2 = as.data.frame(temp)
View(final2)
c
c = grep("^t+(.*)(mean|std)")
features = read.table("features.txt")
getwd()
stwd("..")
setwd("..")
features = read.table("features.txt")
c = grep("^t+(.*)(mean|std)",features)
c = grep("^t+(.*)(mean|std)",features,value = T)
c
c = grep("[^t]+(.*)(mean|std)",features,value = T)
c
length(c)
c = grep("[^]t+(.*)(mean|std)",features$v2)
c = grep("[^t]+(.*)(mean|std)",features$v2)
c = grep("[^t]+(.*)(mean|std)",features$v2,value=T)
c
features$V2
c = grep("^t",features$v2,value=T)
c
c = grep("^t",features$V2,value=T)
c
c = grep("[^t]+(.*)+(mean|std),features$V2,value=T)
)
2e2c
e
31c
4f
))
""
"
c = grep("[^t]+(.*)+(mean|std)",features$V2,value=T)
c
c = grep("^t+(.*)+(mean|std)",features$V2,value=T)
c
c = grepl("mean|std",features$V2)
features = filter(features,c)
feature_names = features$V2
feature_names
str(final2)
Subject
int
No. of the Subject who performed the ativity
Activity
factor
Activity performed by the subject
1 WALKING
2 WALKING_UPSTAIRS
3 WALKING_DOWNSTAIRS
4 SITTING
5 STANDING
6 LAYING
tBodyAcc-mean()-X
Mean of the mean of time domain body acceleration in X direction.
tBodyAcc-mean()-Y
Mean of the mean of time domain body acceleration in y direction.
tBodyAcc-mean()-Z
Mean of the mean of time domain body acceleration in z direction.
tBodyAcc-std()-X
Mean of the standard deviations of time domain body acceleration in X direction.
tBodyAcc-std()-Y
Mean of the standard deviations of time domain body acceleration in Y direction.
tBodyAcc-std()-Z
Mean of the standard deviations of time domain body acceleration in Z direction.
tGravityAcc-mean()-X
Mean of the mean of time domain gravity acceleration in X direction.
tGravityAcc-mean()-Y
Mean of the mean of time domain gravity acceleration in Y direction.
tGravityAcc-mean()-Z
Mean of the mean of time domain gravity acceleration in Z direction.
tGravityAcc-std()-X
Mean of the standard deviations of time domain gravity acceleration in X direction.
tGravityAcc-std()-Y
Mean of the standard deviations of time domain gravity acceleration in Y direction.
tGravityAcc-std()-Z
Mean of the standard deviations of time domain gravity acceleration in Z direction.
tBodyAccJerk-mean()-X
tBodyAccJerk-mean()-Y
tBodyAccJerk-mean()-Z
tBodyAccJerk-mean()-X
tBodyAccJerk-mean()-X
NAMES(feature_names)
feature_names
str(final2)
Subject
int
No. of the Subject who performed the ativity
Activity
factor
Activity performed by the subject
1 WALKING
2 WALKING_UPSTAIRS
3 WALKING_DOWNSTAIRS
4 SITTING
5 STANDING
6 LAYING
tBodyAcc-mean()-X
Mean of the mean of time domain body acceleration in X direction.
tBodyAcc-mean()-Y
Mean of the mean of time domain body acceleration in y direction.
tBodyAcc-mean()-Z
Mean of the mean of time domain body acceleration in z direction.
tBodyAcc-std()-X
Mean of the standard deviations of time domain body acceleration in X direction.
tBodyAcc-std()-Y
Mean of the standard deviations of time domain body acceleration in Y direction.
tBodyAcc-std()-Z
Mean of the standard deviations of time domain body acceleration in Z direction.
tGravityAcc-mean()-X
Mean of the mean of time domain gravity acceleration in X direction.
tGravityAcc-mean()-Y
Mean of the mean of time domain gravity acceleration in Y direction.
tGravityAcc-mean()-Z
Mean of the mean of time domain gravity acceleration in Z direction.
tGravityAcc-std()-X
Mean of the standard deviations of time domain gravity acceleration in X direction.
tGravityAcc-std()-Y
Mean of the standard deviations of time domain gravity acceleration in Y direction.
tGravityAcc-std()-Z
Mean of the standard deviations of time domain gravity acceleration in Z direction.
tBodyAccJerk-mean()-X
tBodyAccJerk-mean()-Y
tBodyAccJerk-mean()-Z
tBodyAccJerk-std()-X
tBodyAccJerk-std()-Y
tBodyAccJerk-std()-Z
tBodyGyro-mean()-X
tBodyGyro-mean()-X
tBodyGyro-mean()-X
tBodyGyro-mean()-X
str(final2)
ff = select(final2,Subject:tBodyGyroJerkMag-std())
ff = final2[,1:42]
names(ff)
setwd("..")
getwd()
setwd("./UCI HAR Dataset/test")
write.table(final2,file = "final.txt",row.names = F)
